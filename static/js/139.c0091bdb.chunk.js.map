{"version":3,"sources":["../../../packages/react-time-picker/README.md"],"names":[],"mappings":"uHAAA,OAAe","file":"static/js/139.c0091bdb.chunk.js","sourcesContent":["export default \"TimePicker 时间选择器\\n===\\n\\n当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。\\n\\n```jsx\\nimport { TimePicker } from 'uiw';\\n// or\\nimport TimePicker from '@uiw/react-time-picker';\\n```\\n\\n## 基础用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => (\\n  <Row gutter={10}>\\n    <Col fixed>\\n      <TimePicker\\n        onChange={(formatDate, date) => {\\n          console.log('--->', formatDate, date);\\n        }}\\n      />\\n    </Col>\\n    <Col fixed>\\n      <TimePicker format=\\\"HH:mm\\\" precision=\\\"minute\\\" />\\n    </Col>\\n    <Col fixed>\\n      <TimePicker format=\\\"HH\\\" precision=\\\"hour\\\" />\\n    </Col>\\n  </Row>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 设置初始值\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => {\\n  const value = new Date(2018, 1, 24, 4,5,35);\\n  return (\\n    <Row gutter={10}>\\n      <Col fixed>\\n        <TimePicker value={value} />\\n      </Col>\\n      <Col fixed>\\n        <TimePicker value={value} format=\\\"HH:mm\\\" precision=\\\"minute\\\" />\\n      </Col>\\n      <Col fixed>\\n        <TimePicker value={value} format=\\\"HH\\\" precision=\\\"hour\\\" />\\n      </Col>\\n    </Row>\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 设置按钮大小\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => {\\n  const value = new Date(2018, 1, 24, 4,5,35);\\n  return (\\n    <Row gutter={10}>\\n      <Col fixed>\\n        <TimePicker size=\\\"small\\\" value={value} />\\n      </Col>\\n      <Col fixed>\\n        <TimePicker size=\\\"large\\\" value={value} format=\\\"HH:mm\\\" precision=\\\"minute\\\" />\\n      </Col>\\n      <Col fixed>\\n        <TimePicker value={value} format=\\\"HH\\\" precision=\\\"hour\\\" />\\n      </Col>\\n    </Row>\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 表单中应用\\n\\n在表单返回的数据，并没有将 `format` 格式化后的数据返回给你，而是返回的一个 `Date`，你可以通过 [`formatter`](#/components/formatter) 重新格式化。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Notify, Row, Col, Form, Button } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onSubmit={({initial, current}) => {\\n        console.log('-->>', initial, current);\\n        if(current.date) {\\n          Notify.success({\\n            title: '提交成功！',\\n            description: `表单提交时间成功，时间为：${formatter('HH:mm:ss', current.date)}`,\\n          });\\n        } else {\\n          Notify.error({\\n            title: '提交失败！',\\n            description: <span>表单提交时间成功，时间为：<b>空</b>，将自动填充初始化值！</span>,\\n          });\\n        }\\n      }}\\n      fields={{\\n        date: {\\n          labelClassName: 'fieldLabel',\\n          labelFor: 'date-inline',\\n          children: <TimePicker />\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        return (\\n          <Row gutter={10}>\\n            <Col fixed>{fields.date}</Col>\\n            <Col>\\n              <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n            </Col>\\n          </Row>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 禁用\\n\\n可以使用 `disabledHours` `disabledMinutes` `disabledSeconds` 禁用部分时间选择。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => (\\n  <Row gutter={10} style={{ maxWidth: 360 }}>\\n    <Col fixed>\\n      <TimePicker\\n        disabledMinutes={(minute, type) => {\\n          if (minute % 15 !== 0) {\\n            return true;\\n          }\\n        }}\\n        disabledHours={(hour, type, date) => {\\n          // console.log('~~:', hour, type, date);\\n          if (hour < 3) {\\n            return true;\\n          }\\n        }}\\n      />\\n    </Col>\\n    <Col>\\n      <TimePicker disabled value={new Date(2018, 1, 24, 4,5,35)} />\\n    </Col>\\n  </Row>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 不显示禁用\\n\\n可以使用 `hideDisabled` 将禁用的部分时间隐藏。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => (\\n  <Row gutter={10} style={{ maxWidth: 360 }}>\\n    <Col fixed>\\n      <TimePicker\\n        hideDisabled\\n        disabledMinutes={(minute, type) => {\\n          if (minute % 15 !== 0) {\\n            return true;\\n          }\\n        }}\\n        disabledHours={(hour, type, date) => {\\n          // console.log('~~:', hour, type, date);\\n          if (hour < 3) {\\n            return true;\\n          }\\n        }}\\n      />\\n    </Col>\\n  </Row>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 间隔时间\\n\\n可以使用 `hideDisabled` 将禁用的部分时间隐藏。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { TimePicker, Row, Col } from 'uiw';\\n\\nconst Demo = () => (\\n  <Row gutter={10} style={{ maxWidth: 360 }}>\\n    <Col fixed>\\n      <TimePicker\\n        hideDisabled\\n        disabledMinutes={(minute, date) => {\\n          if (minute % 15 !== 0) {\\n            return true;\\n          }\\n        }}\\n        disabledSeconds={(second, date) => {\\n          if (second % 15 !== 0) {\\n            return true;\\n          }\\n        }}\\n      />\\n    </Col>\\n  </Row>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| value | 初始时间值 | Date | - |\\n| placeholder | 输入框提示文字 | String | - |\\n| format | 格式化时间，规则查看 [`formatter`](#/components/formatter) 文档 | Function | `HH:mm:ss` |\\n| precision | 选择时间精确度 | Enum{`hour`, `minute`, `second`} | `false` |\\n| disabled | 禁用全部操作 | Boolean | `false` |\\n| disabledHours | 禁止选择部分小时选项 | Function(hour, <br/>type{`Hours`, `Minutes`, `Seconds`}, <br/>selectedDate) | - |\\n| disabledMinutes | 禁止选择部分分钟选项 | Function(minute, <br/>type{`Hours`, `Minutes`, `Seconds`}, <br/>selectedDate) | - |\\n| disabledSeconds | 禁止选择部分秒选项 | Function(second, <br/>type{`Hours`, `Minutes`, `Seconds`}, <br/>selectedDate) | - |\\n| hideDisabled | 不可选择的项隐藏 | Boolean | `false` |\\n| onChange | 时间选择的回调函数 | Function(formatDate, Date, <br/>type{`Hours`, `Minutes`, `Seconds`}, <br/>, num, disableds) | - |\\n\\n`uiw@3.3.0+` 组件集成部分 Input，不再通过 inputProps 属性传值，更多属性请参考 [Input](#/components/input)\\n\\n## ~~Props.inputProps~~\\n\\n`uiw@3.3.0+` 将不支持此属性\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| ~~inputProps~~ | ~~将参数传递给 [`<Input>`](#/components/input) 组件~~ | `Object` | - |\\n\\n## Props.popoverProps\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| popoverProps | 将参数传递给 [`<Popover>`](#/components/popover) 组件 | `Object` | - |\\n\";"],"sourceRoot":""}