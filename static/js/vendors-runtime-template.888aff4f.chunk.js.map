{"version":3,"sources":["../../../node_modules/@babel/template/lib/formatters.js","../../../node_modules/@babel/template/lib/builder.js","../../../node_modules/@babel/template/lib/string.js","../../../node_modules/@babel/highlight/lib/index.js","../../../node_modules/@babel/template/lib/literal.js","../../../node_modules/@babel/template/lib/index.js","../../../node_modules/@babel/parser/lib/index.js","../../../node_modules/@babel/code-frame/lib/index.js","../../../node_modules/@babel/template/lib/options.js","../../../node_modules/@babel/template/lib/parse.js","../../../node_modules/@babel/template/lib/populate.js"],"names":["Object","defineProperty","exports","value","program","expression","statement","statements","smart","t","require","makeStatementFormatter","fn","code","str","validate","unwrap","ast","body","slice","length","Error","start","stmt","assertExpressionStatement","default","createTemplateBuilder","formatter","defaultOpts","templateFnCache","WeakMap","templateAstCache","cachedOpts","_options","assign","tpl","args","extendedTrace","_string","merge","Array","isArray","builder","get","_literal","set","NO_PLACEHOLDER","placeholderPattern","rootStack","error","stack","split","join","arg","err","opts","metadata","replacements","normalizeReplacements","_parse","_populate","shouldHighlight","getChalk","options","chalk","defs","getDefs","highlightTokens","_jsTokens","_helperValidatorIdentifier","_chalk","sometimesKeywords","Set","keyword","cyan","capitalized","yellow","jsxIdentifier","punctuator","number","magenta","string","green","regex","comment","grey","invalid","white","bgRed","bold","tokenize","NEWLINE","BRACKET","JSX_TAG","getTokenType","token","offset","text","type","isKeyword","isStrictReservedWord","has","test","substr","toLowerCase","highlighted","colorize","map","supportsColor","forceColor","constructor","enabled","level","match","exec","matchToToken","index","names","nameSet","prefix","result","buildTemplateCode","parser","placeholderWhitelist","concat","from","preserveComments","syntacticPlaceholders","placeholders","some","placeholder","isDuplicate","name","buildLiteralData","defaultReplacements","forEach","replacement","i","keys","key","prototype","hasOwnProperty","call","push","formatters","_builder","_default","bind","undefined","beforeExpr","startsExpr","isLoop","isAssign","TokenType","label","conf","this","rightAssociative","postfix","binop","updateContext","keywords$1","Map","createKeyword","createBinop","types$1","num","bigint","decimal","regexp","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","line","col","column","SourceLocation","end","filename","identifierName","setTrailingComments","node","comments","trailingComments","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","loc","state","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","trailingNode","containingNode","finalizeComment","splice","leadingComments","commentStart","input","charCodeAt","properties","arguments","params","specifiers","sawUnambiguousESM","ambiguousScriptDifferentAst","plugins","plugin","hasPlugin","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","reasonCode","ParserError","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","lineStart","lastIndex","getLineInfo","raiseWithData","getLocationForPosition","message","replace","_","errorRecovery","errors","_raise","data","errorTemplate","errorContext","isLookahead","TokContext","preserveSpace","types","brace","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","String","fromCharCode","isIdentifierChar","reservedWords","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictBindOnlyReservedWord","isStrictBindReservedWord","reservedWordLikeSet","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","SCOPE_PROGRAM","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_TS_AMBIENT","BIND_NONE","Scope","flags","var","lexical","functions","ScopeHandler","raise","scopeStack","undefinedExports","undefinedPrivateNames","currentVarScopeFlags","currentThisScopeFlags","treatFunctionsAsVarInScope","currentScope","createScope","scope","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","next","id","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","strict","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","exprAllowed","containsEsc","strictErrors","tokensLength","strictMode","sourceType","startLine","curPosition","skipArrays","val","_isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","oct","bin","dec","Token","Tokenizer","tokens","init","checkKeywordEscapes","pushToken","nextToken","curContext","old","createLookaheadState","curr","nextTokenStartSince","nextTokenStart","cp","trail","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","codePointAtPos","indexOf","startSkip","ch","spaceStart","loop","skipBlockComment","addComment","attachComment","skipLineComment","CommentWhitespace","prevType","readToken_interpreter","nextPos","expectPlugin","getPluginOption","readWord1","finishOp","readNumber","width","size","next2","readToken_dot","readToken_question","readRadixNumber","readString","readToken_slash","readToken_mult_modulo","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_numberSign","readWord","fromCodePoint","escaped","inClass","content","mods","char","includes","pattern","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","e","Infinity","prev","Number","isNaN","isBigInt","readInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","readCodePoint","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","kw","_this$state$type$upda","_this$state$type","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","current","elementType","classScope","redefined","CLASS_ELEMENT_KIND_GETTER","accessor","ExpressionScope","ArrowHeadParsingScope","iterator","ExpressionScopeHandler","isCertainlyParameterDeclaration","canBeArrowParameterDeclaration","recordDeclarationError","iterateErrors","clearDeclarationError","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","functionFlags","isAsync","isGenerator","UtilParser","extra","op","isRelational","unexpected","nameStart","nameEnd","nextCh","isUnparsedContextual","isContextual","eat","eatContextual","hasPrecedingLineBreak","canInsertSemicolon","allowAsi","isLineTerminator","messageOrType","missingPlugin","oldState","clone","abortSignal","failState","thrown","aborted","refExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","isPrivateName","property","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","paramFlags","enter","ExpressionErrors","Node","ranges","range","NodePrototype","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","clonePlaceholder","__clone","newNode","NodeUtils","startNodeAt","finishNodeAt","processComment","locationNode","resetStartLocation","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","FLOW_PRAGMA_REGEX","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","object","getQualifiedJSXName","namespace","j_oTag","j_cTag","j_expr","jsxName","jsxText","jsxTagStart","jsxTagEnd","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","tsIsAccessModifier","modifier","PlaceHolderErrors","ClassNameIsRequired","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","mixinPlugins","estree","superClass","estreeParseLiteral","bigInt","BigInt","_unused","parseLiteral","directive","directiveLiteral","expressionValue","raw","isObjectProperty","checkDeclaration","method","_stmt$expression$extr","parenthesized","addExtra","directiveStatements","directives","d","directiveToStmt","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","convertPrivateNameToPrivateIdentifier","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","propertyNode","isPattern","isAccessor","shorthand","startPos","isBinding","isAssignable","isLHS","toAssignable","optional","callee","_node$arguments$","attributes","exported","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","jsx","jsxReadEntity","jsxReadNewLine","normalizeCRLF","entity","count","jsxParseIdentifier","jsxParseNamespacedName","jsxParseExpressionContainer","parseExprAtom","parseExpression","expect","jsxParseEmptyExpression","argument","parseMaybeAssignAllowIn","jsxParseAttributeValue","jsxParseElementName","jsxParseOpeningElementAfterName","jsxParseAttribute","selfClosing","children","openingElement","jsxParseOpeningElementAt","closingElement","contents","jsxParseClosingElementAt","jsxParseElementAt","jsxParseSpreadChild","openingFragment","closingFragment","jsxParseElement","lookaheadState","jsxReadToken","jsxReadWord","jsxReadString","flow","flowPragma","matches","tok","oldInType","flowParseType","moduloPos","expectContextual","predicate","flowParsePredicate","flowParseInterfaceish","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","flowParseTypeAndPredicateInitialiser","returnType","typeAnnotation","resetEndLocation","semicolon","declareName","insideModule","flowParseDeclareClass","flowParseDeclareFunction","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","BIND_KIND_VALUE","bodyNode","parseImport","flowParseDeclare","exit","hasModuleExport","bodyElement","declaration","isEsModuleType","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","liberal","checkReservedType","right","flowParseTypeInitialiser","declare","supertype","impltype","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowParseTypeParameter","expectRelational","oldNoAnonFunctionType","flowParseTypeOrImplicitInstantiation","isStatic","static","lookahead","flowParseObjectPropertyKey","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","valueNode","endDelim","exact","callProperties","indexers","internalSlots","inexact","protoStart","inexactStart","flowParseObjectTypeInternalSlot","flowParseObjectTypeIndexer","flowParseObjectTypeCallProperty","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParsePrimaryType","first","lh","isThis","checkNotUnderscore","flowParseGenericType","isGroupedType","flowParseInterfaceType","flowIdentToTypeAnnotation","flowParseTupleType","reinterpretTypeAsFunctionTypeParam","parseLiteralAtNode","flowParseTypeofType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParsePostfixType","param","flowParseAnonFunctionWithoutParens","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","allowExpressionBody","forwardNoArrowParamsConversionAt","topLevel","flowParseInterface","shouldParseEnums","flowParseEnumDeclaration","isValidDirective","expr","lookaheadCharCode","setOptionalParametersError","originalNoArrowAt","tryParseConditionalConsequent","consequent","failed","getArrowLikeExpressions","valid","alternate","parseMaybeAssign","disallowInvalid","arrows","finishArrowValidation","list","list1","list2","partition","every","_node$extra","toAssignableList","trailingComma","SCOPE_FUNCTION","parse","typeCastNode","decl","declarationNode","parseExportSpecifiers","parseExportFrom","hasNamespace","isStatement","optionalId","member","parseClassMemberFromModifier","fullWord","isIterator","isIteratorStart","readIterator","typeCastToParameter","exprList","trailingCommaPos","isParenthesizedExpr","_expr$extra","close","canBePattern","isTuple","toReferencedList","isThisParam","superTypeParameters","implemented","getObjectOrClassMethodParams","isPrivateNameAllowed","left","specifier","contextDescription","local","checkLVal","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","allowModifiers","afterLeftParse","_jsx","tryParse","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","async","allowDuplicates","isArrowFunction","canBeArrow","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","finishCallExpression","shouldParseTypes","flowParseTypeParameterInstantiationCallOrNew","targs","parseFunctionParams","parseArrow","parseArrowExpression","file","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","enumName","memberName","toUpperCase","suppliedType","explicitType","endOfInit","literal","parseNumericLiteral","parseStringLiteral","parseBooleanLiteral","flowEnumMemberInit","expectedType","flowEnumErrorInvalidMemberInitializer","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumMemberRaw","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","flowEnumCheckExplicitTypeMismatch","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorNumberMemberNotInitialized","initializedMembers","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumErrorInvalidExplicitType","nameLoc","flowEnumParseExplicitType","flowEnumMembers","flowEnumStringMembers","boolsLen","numsLen","strsLen","defaultedLen","flowEnumErrorInconsistentMemberValues","flowEnumBody","afterNext","typescript","isLiteralPropertyName","tsTokenCanFollowModifier","allowedModifiers","tsTryParse","tsNextTokenCanFollowModifier","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","tsParseModifier","accessibility","parseElement","tsIsListTerminator","tsParseDelimitedListWorker","expectSuccess","element","bracket","skipFirstToken","tsParseDelimitedList","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","typeName","lhs","parameterName","tsParseTypeAnnotation","asserts","exprName","tsParseImportType","tsParseTypeParameterName","constraint","tsEatThenParseType","tsParseTypeParameters","tsParseBracketedList","tsParseTypeParameter","tsParseTypeReference","returnToken","signature","returnTokenRequired","tsTryParseTypeParameters","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsFillSignature","tsParseTypeMemberSemicolon","tsLookAhead","tsIsUnambiguouslyIndexSignature","tsTryParseTypeAnnotation","readonly","nodeAny","firstParameter","tsParseSignatureMember","createIdentifier","tsParsePropertyOrMethodSignature","tsParseModifiers","idx","tsTryParseIndexSignature","parsePropertyName","tsParseObjectTypeMembers","tsParseList","tsParseTypeMember","tsIsIdentifier","tsExpectThenParseType","tsParseMappedTypeParameter","nameType","tsParseType","tsTryParseType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeledNode","optionalTypeNode","restNode","abstract","parseTemplate","thisKeyword","tsParseThisTypeNode","tsParseThisTypePredicate","keywordTypeFromName","tsParseLiteralTypeNode","parseMaybeUnary","tsParseThisTypeOrThisTypePredicate","tsParseTypeQuery","tsIsStartOfMappedType","tsParseMappedType","tsParseTypeLiteral","tsParseTupleType","tsParseParenthesizedType","tsParseTemplateLiteralType","tsParseNonArrayType","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseTypeOperator","tsParseInferType","tsParseArrayTypeOrHigher","parseConstituentType","hasLeadingOperator","tsParseUnionOrIntersectionType","tsParseIntersectionTypeOrHigher","tsIsUnambiguouslyStartOfFunctionType","braceStackCounter","tsSkipParameterStart","tsInType","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsIsStartOfFunctionType","tsParseFunctionOrConstructorType","isAbstractConstructorSignature","tsParseUnionTypeOrHigher","tsTryNextParseConstantContext","tsNextThenParseType","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseHeritageClause","cb","oldContext","tsDoThenParseType","initializer","BIND_TS_ENUM","tsParseEnumMember","parseBlockOrModuleBlockBody","nested","inner","tsParseModuleOrNamespaceDeclaration","tsParseModuleBlock","global","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","tsParseEnumDeclaration","parseVarStatement","tsParseAmbientExternalModuleDeclaration","tsParseDeclaration","tsTryParseDeclare","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","hasFollowingLineBreak","oldMaybeInArrowParameters","tsTryParseAndCatch","tsTryParseTypeOrTypePredicateAnnotation","tsInNoContext","tsIsDeclarationStart","decorators","override","parseMaybeDefault","parseAssignableListItemTypes","elt","pp","parameter","bodilessType","items","isInParens","tsCheckForInvalidTypeCasts","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","tsTryParseGenericAsyncArrowFunction","parseTaggedTemplateExpression","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","parseExprOp","checkKeywords","ahead","tsParseImportEqualsDeclaration","importNode","isAbstractClass","cls","interfaceNode","modifiers","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","tsHasSomeModifiers","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","methodOrProp","tsParseExpressionStatement","isDeclare","shouldParseExportDeclaration","tsTryParseExportDeclaration","definite","parseClassPropertyAnnotation","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","tsParseTypeAssertion","toAssignableParenthesizedExpression","_expr$extra2","baseCount","firstParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","v8intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","parseV8Intrinsic","assertNoSpace","finishPlaceholder","isFinished","parsePlaceholder","parseStatement","takeDecorators","oldStrict","parseClassId","parseClassSuper","parseClassBody","startsWith","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","unwrapParenthesizedExpression","ExpressionParser","isRecord","protoRef","isObjectMethod","used","enterInitialScopes","finalizeRemainingComments","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","resultError","_resultError$pos","ownExpressionErrors","hasYield","parseYield","parseMaybeConditional","checkExpressionErrors","parseExprOps","shouldExitDescending","parseConditional","prec","hasIn","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","nextOp","withTopicBindingContext","bodyExpr","parseHackPipeBody","checkHackPipeBodyEarlyErrors","childExpr","parseSmartPipelineBodyInStyle","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseExprOpBaseRightExpr","sawUnary","isAwait","isAwaitAllowed","parseAwait","checkExponentialAfterUnary","update","isDelete","hasPropertyAsPrivateName","parseUpdate","isAmbiguousAwait","raiseOverwrite","parseExprSubscripts","parseSubscripts","maybeAsyncArrow","parseSubscript","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","usePrivateName","parseNoCallExpr","shouldParseAsyncArrow","validateAsPattern","parseAsyncArrowFromCallExpression","toReferencedArguments","toReferencedListDeep","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","elts","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","resetPreviousNodeTrailingComments","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","readRegexp","parseRegExpLiteral","parseBigIntLiteral","parseDecimalLiteral","parseNullLiteral","parseParenAndDistinguishExpression","parseArrayLike","parseObjectLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","expectOnePlugin","nodeType","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","parseBlock","allowSuper","meta","parseMetaProperty","propertyName","spreadStart","optionalCommaStart","innerStartPos","innerStartLoc","spreadNodeStartPos","spreadNodeStartLoc","parseParenItem","parseRestBinding","checkCommaAfterRest","innerEndPos","innerEndLoc","arrowNode","shouldParseArrow","parenExpression","metaProp","inNonArrowFunction","parseNew","isOptionalChain","parseNewArguments","parseExprList","isTagged","elem","cooked","tail","curElt","parseTemplateElement","quasis","parseTemplateSubstitution","propHash","parsePropertyDefinition","checkProto","parseDecorator","parseSpread","maybeAsyncOrAccessorProp","keyName","parseObjPropValue","_params","getGetterSetterExpectedParamCount","checkGetterSetterParams","parseObjectMethod","parseObjectProperty","oldInPropertyName","parseMaybePrivateName","generator","initFunction","parseFunctionBodyAndFinish","setArrowFunctionParameters","parseFunctionBody","isExpression","checkParams","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","strictModeChanged","checkClashes","allowEmpty","canBeReservedWord","inStaticBlock","recordAsyncArrowParametersError","inClassAndNotInNonArrowFunction","inFunction","recordParameterInitializerError","delegating","delegate","topicReferenceWasUsedInCurrentContext","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","outerContextSoloAwaitState","ret","revertScopes","initializeScopes","parseProgram","_node$extra3","recordParenthesizedIdentifierError","last","_node$extra2","isLast","toAssignableObjectExpressionProp","raiseRestNotLast","checkToRestConversion","raiseTrailingCommaAfterRest","refNeedsArrowPos","parseBindingAtom","closeCharCode","parseAssignableListItem","_startLoc","_startPos","_left","disallowLetBinding","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","Parser","getOptions","pluginMap","pluginsMap","parseTopLevel","hashEndPos","hashEndLoc","babel7CompatTokens","interpreter","parseInterpreterDirective","parseBlockBody","isLetKeyword","endCh","parseStatementContent","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","assertModuleNodeAllowed","isAsyncFunction","maybeName","parseLabeledStatement","parseExpressionStatement","allowExport","currentContextDecorators","decorator","canHaveLeadingDecorator","parseMaybeDecoratorArguments","isBreak","verifyBreakContinue","lab","withSmartMixTopicForbiddingContext","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","hasReturn","discriminant","cur","sawDefault","cases","isCase","simple","block","handler","clause","parseCatchClauseParam","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","stmtToDirective","setStrict","isForIn","await","isFor","isTypescript","parseVarId","parseMaybeAssignDisallowIn","isHangingStatement","requireId","parseFunctionId","registerFunctionStatementId","treatFunctionsAsVar","hadConstructor","parseClassMember","isClassMethod","pushClassMethod","isClassProperty","parseClassProperty","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","pushClassPrivateMethod","isNonstaticConstructor","isPrivate","maybeQuestionTokenStart","parsePostMemberNameModifiers","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseClassPrivateProperty","declarePrivateName","getPrivateNameSV","CLASS_ELEMENT_KIND_SETTER","parseInitializer","hasDefault","maybeParseExportDefaultSpecifier","parseAfterDefault","hasStar","eatExportStar","maybeParseExportNamespaceSpecifier","parseAfterNamespace","isFromRequired","hasDeclaration","hasSpecifiers","maybeParseExportNamedSpecifiers","maybeParseExportDeclaration","checkExport","parseExportDefaultExpression","isExportDefaultSpecifier","parseExportDeclaration","FUNC_STATEMENT","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","checkDuplicateExports","_declaration$extra","exportedName","checkLocalExport","nodes","isString","surrogate","toString","parseNext","maybeParseDefaultImportSpecifier","maybeParseModuleAttributes","attrs","attrNames","parseAssertEntries","shouldParseDefaultImport","parseImportSpecifierLocal","parseImportSpecifier","importedIsString","getParser","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","missingPlugins","validatePlugins","pluginsFromOptions","pluginList","parserClassCache","getParserClass","moduleError","_unused2","getExpression","tokTypes","codeFrameColumns","rawLines","lineNumber","colNumber","deprecationWarningShown","process","emitWarning","deprecationError","console","warn","location","Math","max","_highlight","gutter","marker","red","getMarkerLines","linesAbove","linesBelow","startColumn","endLine","endColumn","min","lineDiff","markerLines","sourceLength","highlightCode","maybeHighlight","chalkFn","lines","hasColumns","numberMaxWidth","highlightedLines","frame","paddedNumber","hasMarker","lastMarkerLine","markerLine","markerSpacing","numberOfMarkers","repeat","reset","a","b","_ref","excluded","target","sourceKeys","_objectWithoutPropertiesLoose","reduce","acc","parserOpts","_parser","_codeFrame","parseWithCodeFrame","removePropertiesDeep","syntactic","placeholderNames","legacy","isLegacyRef","traverse","placeholderVisitorHandler","PATTERN","ancestors","_state$placeholderWhi","isPlaceholder","isIdentifier","isJSXIdentifier","isStringLiteral","parent","isNewExpression","isCallExpression","isFunction","isExpressionStatement","resolve","resolveAncestors","cloneNode","placeholderName","reverse","stringLiteral","blockStatement","expressionStatement","emptyStatement","applyReplacement"],"mappings":"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","file":"static/js/vendors-runtime-template.888aff4f.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;\n\nvar t = require(\"@babel/types\");\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    t.assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createTemplateBuilder;\n\nvar _options = require(\"./options\");\n\nvar _string = require(\"./string\");\n\nvar _literal = require(\"./literal\");\n\nconst NO_PLACEHOLDER = (0, _options.validate)({\n  placeholderPattern: false\n});\n\nfunction createTemplateBuilder(formatter, defaultOpts) {\n  const templateFnCache = new WeakMap();\n  const templateAstCache = new WeakMap();\n  const cachedOpts = defaultOpts || (0, _options.validate)(null);\n  return Object.assign((tpl, ...args) => {\n    if (typeof tpl === \"string\") {\n      if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n      return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));\n    } else if (Array.isArray(tpl)) {\n      let builder = templateFnCache.get(tpl);\n\n      if (!builder) {\n        builder = (0, _literal.default)(formatter, tpl, cachedOpts);\n        templateFnCache.set(tpl, builder);\n      }\n\n      return extendedTrace(builder(args));\n    } else if (typeof tpl === \"object\" && tpl) {\n      if (args.length > 0) throw new Error(\"Unexpected extra params.\");\n      return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));\n    }\n\n    throw new Error(`Unexpected template param ${typeof tpl}`);\n  }, {\n    ast: (tpl, ...args) => {\n      if (typeof tpl === \"string\") {\n        if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n        return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();\n      } else if (Array.isArray(tpl)) {\n        let builder = templateAstCache.get(tpl);\n\n        if (!builder) {\n          builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));\n          templateAstCache.set(tpl, builder);\n        }\n\n        return builder(args)();\n      }\n\n      throw new Error(`Unexpected template param ${typeof tpl}`);\n    }\n  });\n}\n\nfunction extendedTrace(fn) {\n  let rootStack = \"\";\n\n  try {\n    throw new Error();\n  } catch (error) {\n    if (error.stack) {\n      rootStack = error.stack.split(\"\\n\").slice(3).join(\"\\n\");\n    }\n  }\n\n  return arg => {\n    try {\n      return fn(arg);\n    } catch (err) {\n      err.stack += `\\n    =============\\n${rootStack}`;\n      throw err;\n    }\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stringTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction stringTemplate(formatter, code, opts) {\n  code = formatter.code(code);\n  let metadata;\n  return arg => {\n    const replacements = (0, _options.normalizeReplacements)(arg);\n    if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);\n    return formatter.unwrap((0, _populate.default)(metadata, replacements));\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldHighlight = shouldHighlight;\nexports.getChalk = getChalk;\nexports.default = highlight;\n\nvar _jsTokens = require(\"js-tokens\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _chalk = require(\"chalk\");\n\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\nfunction getDefs(chalk) {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold\n  };\n}\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  const getTokenType = function (token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text) {\n    let match;\n\n    while (match = _jsTokens.default.exec(text)) {\n      const token = _jsTokens.matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\n\nfunction highlightTokens(defs, text) {\n  let highlighted = \"\";\n\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    const colorize = defs[type];\n\n    if (colorize) {\n      highlighted += value.split(NEWLINE).map(str => colorize(str)).join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n\nfunction shouldHighlight(options) {\n  return !!_chalk.supportsColor || options.forceColor;\n}\n\nfunction getChalk(options) {\n  return options.forceColor ? new _chalk.constructor({\n    enabled: true,\n    level: 1\n  }) : _chalk;\n}\n\nfunction highlight(code, options = {}) {\n  if (shouldHighlight(options)) {\n    const chalk = getChalk(options);\n    const defs = getDefs(chalk);\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.program = exports.expression = exports.statements = exports.statement = exports.smart = void 0;\n\nvar formatters = require(\"./formatters\");\n\nvar _builder = require(\"./builder\");\n\nconst smart = (0, _builder.default)(formatters.smart);\nexports.smart = smart;\nconst statement = (0, _builder.default)(formatters.statement);\nexports.statement = statement;\nconst statements = (0, _builder.default)(formatters.statements);\nexports.statements = statements;\nconst expression = (0, _builder.default)(formatters.expression);\nexports.expression = expression;\nconst program = (0, _builder.default)(formatters.program);\nexports.program = program;\n\nvar _default = Object.assign(smart.bind(undefined), {\n  smart,\n  statement,\n  statements,\n  expression,\n  program,\n  ast: smart.ast\n});\n\nexports.default = _default;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  context.pop();\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = types$1.dollarBraceL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? types$1.moduloAssign : types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(types$1.colon) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr, types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(types$1.questionDot) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(types$1.parenL)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, types$1.parenL);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(types$1.eq)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(types$1.colon)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      const leftIsHackPipeExpression = left.type === \"BinaryExpression\" && left.operator === \"|>\" && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n      if (leftIsHackPipeExpression) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, operator);\n      }\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              const bodyExpr = this.parseHackPipeBody(op, prec);\n              this.checkHackPipeBodyEarlyErrors(startPos);\n              return bodyExpr;\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              const childExpr = this.parseHackPipeBody(op, prec);\n              return this.parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody(op, prec) {\n    const bodyIsInGeneratorContext = this.prodParam.hasYield;\n    const bodyIsYieldExpression = bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n    if (bodyIsYieldExpression) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n    } else {\n      return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const {\n            value,\n            start\n          } = this.state;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.classScope.usePrivateName(value, start);\n          } else {\n            this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n          }\n\n          return node;\n        }\n\n      case types$1.moduloAssign:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = types$1.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case types$1.modulo:\n      case types$1.hash:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenType.label);\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenType.label === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === types$1.hash;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, types$1.arrow.label);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(types$1.name) && !this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(types$1.star) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(types$1.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeFrameColumns = codeFrameColumns;\nexports.default = _default;\n\nvar _highlight = require(\"@babel/highlight\");\n\nlet deprecationWarningShown = false;\n\nfunction getDefs(chalk) {\n  return {\n    gutter: chalk.grey,\n    marker: chalk.red.bold,\n    message: chalk.red.bold\n  };\n}\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\nfunction getMarkerLines(loc, source, opts) {\n  const startLoc = Object.assign({\n    column: 0,\n    line: -1\n  }, loc.start);\n  const endLoc = Object.assign({}, startLoc, loc.end);\n  const {\n    linesAbove = 2,\n    linesBelow = 3\n  } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n\n  if (startLine === -1) {\n    start = 0;\n  }\n\n  if (endLine === -1) {\n    end = source.length;\n  }\n\n  const lineDiff = endLine - startLine;\n  const markerLines = {};\n\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n\n  return {\n    start,\n    end,\n    markerLines\n  };\n}\n\nfunction codeFrameColumns(rawLines, loc, opts = {}) {\n  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);\n  const chalk = (0, _highlight.getChalk)(opts);\n  const defs = getDefs(chalk);\n\n  const maybeHighlight = (chalkFn, string) => {\n    return highlighted ? chalkFn(string) : string;\n  };\n\n  const lines = rawLines.split(NEWLINE);\n  const {\n    start,\n    end,\n    markerLines\n  } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n  const numberMaxWidth = String(end).length;\n  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;\n  let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => {\n    const number = start + 1 + index;\n    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n    const gutter = ` ${paddedNumber} |`;\n    const hasMarker = markerLines[number];\n    const lastMarkerLine = !markerLines[number + 1];\n\n    if (hasMarker) {\n      let markerLine = \"\";\n\n      if (Array.isArray(hasMarker)) {\n        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\n        const numberOfMarkers = hasMarker[1] || 1;\n        markerLine = [\"\\n \", maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")), \" \", markerSpacing, maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers)].join(\"\");\n\n        if (lastMarkerLine && opts.message) {\n          markerLine += \" \" + maybeHighlight(defs.message, opts.message);\n        }\n      }\n\n      return [maybeHighlight(defs.marker, \">\"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : \"\", markerLine].join(\"\");\n    } else {\n      return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : \"\"}`;\n    }\n  }).join(\"\\n\");\n\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n\n  if (highlighted) {\n    return chalk.reset(frame);\n  } else {\n    return frame;\n  }\n}\n\nfunction _default(rawLines, lineNumber, colNumber, opts = {}) {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n    const message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n\n    if (process.emitWarning) {\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n\n  colNumber = Math.max(colNumber, 0);\n  const location = {\n    start: {\n      column: colNumber,\n      line: lineNumber\n    }\n  };\n  return codeFrameColumns(rawLines, location, opts);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = merge;\nexports.validate = validate;\nexports.normalizeReplacements = normalizeReplacements;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction merge(a, b) {\n  const {\n    placeholderWhitelist = a.placeholderWhitelist,\n    placeholderPattern = a.placeholderPattern,\n    preserveComments = a.preserveComments,\n    syntacticPlaceholders = a.syntacticPlaceholders\n  } = b;\n  return {\n    parser: Object.assign({}, a.parser, b.parser),\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders\n  };\n}\n\nfunction validate(opts) {\n  if (opts != null && typeof opts !== \"object\") {\n    throw new Error(\"Unknown template options.\");\n  }\n\n  const _ref = opts || {},\n        {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders\n  } = _ref,\n        parser = _objectWithoutPropertiesLoose(_ref, [\"placeholderWhitelist\", \"placeholderPattern\", \"preserveComments\", \"syntacticPlaceholders\"]);\n\n  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {\n    throw new Error(\"'.placeholderWhitelist' must be a Set, null, or undefined\");\n  }\n\n  if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {\n    throw new Error(\"'.placeholderPattern' must be a RegExp, false, null, or undefined\");\n  }\n\n  if (preserveComments != null && typeof preserveComments !== \"boolean\") {\n    throw new Error(\"'.preserveComments' must be a boolean, null, or undefined\");\n  }\n\n  if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== \"boolean\") {\n    throw new Error(\"'.syntacticPlaceholders' must be a boolean, null, or undefined\");\n  }\n\n  if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {\n    throw new Error(\"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" + \" with '.syntacticPlaceholders: true'\");\n  }\n\n  return {\n    parser,\n    placeholderWhitelist: placeholderWhitelist || undefined,\n    placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern,\n    preserveComments: preserveComments == null ? undefined : preserveComments,\n    syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders\n  };\n}\n\nfunction normalizeReplacements(replacements) {\n  if (Array.isArray(replacements)) {\n    return replacements.reduce((acc, replacement, i) => {\n      acc[\"$\" + i] = replacement;\n      return acc;\n    }, {});\n  } else if (typeof replacements === \"object\" || replacements == null) {\n    return replacements || undefined;\n  }\n\n  throw new Error(\"Template replacements must be an array, object, null, or undefined\");\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseAndBuildMetadata;\n\nvar t = require(\"@babel/types\");\n\nvar _parser = require(\"@babel/parser\");\n\nvar _codeFrame = require(\"@babel/code-frame\");\n\nconst PATTERN = /^[_$A-Z0-9]+$/;\n\nfunction parseAndBuildMetadata(formatter, code, opts) {\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders\n  } = opts;\n  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);\n  t.removePropertiesDeep(ast, {\n    preserveComments\n  });\n  formatter.validate(ast);\n  const syntactic = {\n    placeholders: [],\n    placeholderNames: new Set()\n  };\n  const legacy = {\n    placeholders: [],\n    placeholderNames: new Set()\n  };\n  const isLegacyRef = {\n    value: undefined\n  };\n  t.traverse(ast, placeholderVisitorHandler, {\n    syntactic,\n    legacy,\n    isLegacyRef,\n    placeholderWhitelist,\n    placeholderPattern,\n    syntacticPlaceholders\n  });\n  return Object.assign({\n    ast\n  }, isLegacyRef.value ? legacy : syntactic);\n}\n\nfunction placeholderVisitorHandler(node, ancestors, state) {\n  var _state$placeholderWhi;\n\n  let name;\n\n  if (t.isPlaceholder(node)) {\n    if (state.syntacticPlaceholders === false) {\n      throw new Error(\"%%foo%%-style placeholders can't be used when \" + \"'.syntacticPlaceholders' is false.\");\n    } else {\n      name = node.name.name;\n      state.isLegacyRef.value = false;\n    }\n  } else if (state.isLegacyRef.value === false || state.syntacticPlaceholders) {\n    return;\n  } else if (t.isIdentifier(node) || t.isJSXIdentifier(node)) {\n    name = node.name;\n    state.isLegacyRef.value = true;\n  } else if (t.isStringLiteral(node)) {\n    name = node.value;\n    state.isLegacyRef.value = true;\n  } else {\n    return;\n  }\n\n  if (!state.isLegacyRef.value && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {\n    throw new Error(\"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" + \" with '.syntacticPlaceholders: true'\");\n  }\n\n  if (state.isLegacyRef.value && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {\n    return;\n  }\n\n  ancestors = ancestors.slice();\n  const {\n    node: parent,\n    key\n  } = ancestors[ancestors.length - 1];\n  let type;\n\n  if (t.isStringLiteral(node) || t.isPlaceholder(node, {\n    expectedNode: \"StringLiteral\"\n  })) {\n    type = \"string\";\n  } else if (t.isNewExpression(parent) && key === \"arguments\" || t.isCallExpression(parent) && key === \"arguments\" || t.isFunction(parent) && key === \"params\") {\n    type = \"param\";\n  } else if (t.isExpressionStatement(parent) && !t.isPlaceholder(node)) {\n    type = \"statement\";\n    ancestors = ancestors.slice(0, -1);\n  } else if (t.isStatement(node) && t.isPlaceholder(node)) {\n    type = \"statement\";\n  } else {\n    type = \"other\";\n  }\n\n  const {\n    placeholders,\n    placeholderNames\n  } = state.isLegacyRef.value ? state.legacy : state.syntactic;\n  placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: placeholderNames.has(name)\n  });\n  placeholderNames.add(name);\n}\n\nfunction resolveAncestors(ast, ancestors) {\n  let parent = ast;\n\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const {\n      key,\n      index\n    } = ancestors[i];\n\n    if (index === undefined) {\n      parent = parent[key];\n    } else {\n      parent = parent[key][index];\n    }\n  }\n\n  const {\n    key,\n    index\n  } = ancestors[ancestors.length - 1];\n  return {\n    parent,\n    key,\n    index\n  };\n}\n\nfunction parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {\n  const plugins = (parserOpts.plugins || []).slice();\n\n  if (syntacticPlaceholders !== false) {\n    plugins.push(\"placeholders\");\n  }\n\n  parserOpts = Object.assign({\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: \"module\"\n  }, parserOpts, {\n    plugins\n  });\n\n  try {\n    return (0, _parser.parse)(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n\n    if (loc) {\n      err.message += \"\\n\" + (0, _codeFrame.codeFrameColumns)(code, {\n        start: loc\n      });\n      err.code = \"BABEL_TEMPLATE_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populatePlaceholders;\n\nvar t = require(\"@babel/types\");\n\nfunction populatePlaceholders(metadata, replacements) {\n  const ast = t.cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n        throw new Error(`Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`);\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  metadata.placeholders.slice().reverse().forEach(placeholder => {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n      throw e;\n    }\n  });\n  return ast;\n}\n\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => t.cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = t.cloneNode(replacement);\n    }\n  }\n\n  const {\n    parent,\n    key,\n    index\n  } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.stringLiteral(replacement);\n    }\n\n    if (!replacement || !t.isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = t.emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = t.blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = t.expressionStatement(t.identifier(replacement));\n      } else if (!t.isStatement(replacement)) {\n        replacement = t.expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = t.identifier(replacement);\n        }\n\n        if (!t.isStatement(replacement)) {\n          replacement = t.expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    t.validate(parent, key, replacement);\n    parent[key] = replacement;\n  } else {\n    const items = parent[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    t.validate(parent, key, items);\n    parent[key] = items;\n  }\n}"],"sourceRoot":""}