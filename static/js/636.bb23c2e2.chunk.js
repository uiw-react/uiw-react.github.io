(this.webpackJsonpuiw=this.webpackJsonpuiw||[]).push([[636],{1361:function(n,t,e){"use strict";e.r(t),t.default="formatter \u65f6\u95f4\u683c\u5f0f\u5316\n===\n\n\u7528\u4e8e\u65f6\u95f4\u683c\u5f0f\u5316\uff0c\u65f6\u95f4\u683c\u5f0f\u5316\u662f\u7ec4\u4ef6\u65e0\u4f9d\u8d56\u53ef\u5355\u72ec\u4f7f\u7528\uff0cNode.js \u540e\u7aef\u4e5f\u53ef\u4ee5\u4f7f\u7528 [uiwjs/date-formatter](https://github.com/uiwjs/date-formatter)\uff0cNode.js \u4f7f\u7528\u9700\u8981\u5355\u72ec\u5b89\u88c5\u3002\n\n```jsx\nimport { formatter } from 'uiw';\n\nconsole.log(formatter('YYYY/MM/DD mm:ss'));\n//=> 2019-02-16 02:18\nconsole.log(formatter.utc());\n//=> 2019-02-16\n```\n\n## \u57fa\u7840\u5b9e\u4f8b\n\n\x3c!--DemoStart,bgWhite,codePen--\x3e \n```js\nimport { Tag, Divider, formatter } from 'uiw';\n\nconst Demo = () => {\n  return (\n    <div>\n      <Tag title=\"formatter('YYYY ? MM # DD')\" color=\"#1C7CEB\">{formatter('YYYY ? MM # DD')}</Tag>\n      <Divider />\n      <Tag title=\"formatter.utc()\">{formatter.utc()}</Tag>\n      <Divider />\n      {formatter('YYYY / MM / DD', new Date(1987, 2, 4))}\n    </div>\n  );\n};\nReactDOM.render(<Demo />, _mount_);\n```\n\x3c!--End--\x3e\n\n## \u683c\u5f0f\u5316\u65f6\u95f4\n\n```js\nconsole.log(formatter('YYYYMMDD'));\n//=> 20190217\nconsole.log(formatter.utc('YYYYMMDD'));\n//=> 20190217\n\nconsole.log(formatter('YYYYMMDD:ss'));\n//=> 20190217:24\nconsole.log(formatter.utc('YYYYMMDD:ss'));\n//=> 20190217:24\n\nconsole.log(formatter('YYYY/MM/DD:mm:ss'));\n//=> 2019/02/17:46:24\nconsole.log(formatter.utc('YYYY/MM/DD:mm:ss'));\n//=> 2019/02/17:46:24\n\nconsole.log(formatter('YYYY:MM:DD'));\n//=> 2019:02:17\nconsole.log(formatter.utc('YYYY:MM:DD'));\n//=> 2019:02:17\n\nconsole.log(formatter('[YYYY:MM:DD]'));\n//=> [2019:02:17]\nconsole.log(formatter.utc('[YYYY:MM:DD]'));\n//=> [2019:02:17]\n\nconsole.log(formatter('YYYY/MM/DD'));\n//=> 2019/02/17\nconsole.log(formatter.utc('YYYY/MM/DD'));\n//=> 2019/02/17\n\nconsole.log(formatter('YYYY:MM'));\n//=> 2019:02\nconsole.log(formatter.utc('YYYY:MM'));\n//=> 2019:02\n\nconsole.log(formatter('YYYY'));\n//=> 2019\nconsole.log(formatter.utc('YYYY'));\n//=> 2019\n\nconsole.log(formatter('MM'));\n//=> 10\nconsole.log(formatter.utc('MM'));\n//=> 10\n\nconsole.log(formatter('DD'));\n//=> 26\nconsole.log(formatter.utc('DD'));\n//=> 26\n\nconsole.log(formatter('HH'));\n//=> 00\nconsole.log(formatter.utc('HH'));\n//=> 04\n\nconsole.log(formatter('mm'));\n//=> 46\nconsole.log(formatter.utc('mm'));\n//=> 46\n\nconsole.log(formatter('ss'));\n//=> 24\nconsole.log(formatter.utc('ss'));\n//=> 24\n\nconsole.log(formatter('ms'));\n//=> 186\nconsole.log(formatter.utc('ms'));\n//=> 186\n```\n\n## \u65f6\u533a\u8f6c\u6362\n\n`TZC` \u4e3a\u65f6\u533a\u8f6c\u6362\uff0c\u6709\u4e2a\u5e94\u7528\u573a\u666f\uff0c\u670d\u52a1\u5668\u65f6\u95f4\u65f6\u533a\uff0c\u5c06\u65f6\u533a\u8f6c\u6362\u6210\u8ddf\u5ba2\u6237\u7aef\u65f6\u533a\u4e00\u81f4\uff0c\u4f8b\u5982\u897f\u9762\u662f\u8f6c\u6362\u5230\u4e1c\u516b\u533a\u65f6\u95f4\u3002\n\n\x3c!--DemoStart,bgWhite,codePen--\x3e \n```js\nimport { Divider, formatter } from 'uiw';\n\nfunction timeZoneConverter(date, timeZone) {\n  const oldDate = new Date(date);\n  const newDate = new Date();\n  const stamp = oldDate.getTime();\n  if (!timeZone) return oldDate;\n  return (isNaN(timeZone) && !timeZone)\n    ? oldDate :\n    new Date(stamp + (newDate.getTimezoneOffset() * 60 * 1000) + (timeZone * 60 * 60 * 1000));\n}\nconst Demo = () => {\n  const date = timeZoneConverter('Wed Nov 22 2017 02:06:01 GMT+100 (CST)', 8);\n  return (\n    <div>\n      {formatter('YYYY / MM / DD', new Date(date))}\n      <Divider />\n      {date.toString()}\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, _mount_);\n```\n\x3c!--End--\x3e\n\n## API\n\n```js\nformatter(rule: String, date: Date, utc: Number);\nformatter.utc(rule: String, date: Date);\n```\n\n\u4e0b\u9762\u65b9\u6cd5\uff0c\u89e3\u51b3\u56e0\u65f6\u533a\u53d8\u66f4\uff0c\u5bfc\u81f4\u663e\u793a\u670d\u52a1\u5668\u65f6\u95f4\u4e0d\u51c6\u786e\n\n```js\nfunction timeZoneConverter(date, timeZone) {\n  const oldDate = new Date(date);\n  const newDate = new Date();\n  const stamp = oldDate.getTime();\n  if (!timeZone) return oldDate;\n  return (isNaN(timeZone) && !timeZone)\n    ? oldDate :\n    new Date(stamp + (newDate.getTimezoneOffset() * 60 * 1000) + (timeZone * 60 * 60 * 1000));\n}\n```\n\n## \u683c\u5f0f\u5316\u89c4\u5219\n\n| \u53c2\u6570 | \u8bf4\u660e | \u4e2d\u6587\u8bf4\u660e | \u5b9e\u4f8b |\n|--------- |-------- |--------- |-------- |\n| `YYYY` | full year | \u5e74 | \u4f8b\uff1a`2019` |\n| `MM` | month | \u6708 | \u4f8b\uff1a`02` |\n| `DD` | day | \u5929 | \u4f8b: `05` |\n| `HH` | hours | \u65f6 | \u4f8b: `12` |\n| `mm` | minutes | \u5206\u949f | \u4f8b: `59` |\n| `ss` | seconds | \u79d2 | \u4f8b: `09` |\n| `ms` | milliseconds | \u6beb\u79d2 | \u4f8b: `532` |\n"}}]);