{"version":3,"sources":["../../../packages/react-pin-code/README.md"],"names":[],"mappings":"uHAAA,OAAe","file":"static/js/123.a2d1406b.chunk.js","sourcesContent":["export default \"PinCode 安全码\\n===\\n\\n针对输入数字序列进行了优化。最常见的应用是输入一次性安全码。它经过优化，可快速输入数字。\\n\\n```jsx\\nimport { PinCode } from 'uiw';\\n// or\\nimport PinCode from '@uiw/react-pin-code';\\n```\\n\\n### 基础用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { PinCode } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <PinCode autoFocus value={['', '', '', '', '']} onChange={(val) => console.log(val)} />\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 在表单中使用\\n\\n在 [`<Form />`](#/components/form) 表单中应用 [`<PinCode />`](#/components/pin-code) 组件\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Row, Col, Icon, PinCode, Button, Notify } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      resetOnSubmit={false}\\n      onSubmitError={(error) => {\\n        if (error.filed) {\\n          return { ...error.filed };\\n        }\\n        return null;\\n      }}\\n      onSubmit={({initial, current}) => {\\n        const errorObj = {};\\n        if (current.pinCode.join('').length === 0) {\\n          errorObj.pinCode = '请输入安全码！';\\n        }\\n        if (current.pinCode.join('').length < 5) {\\n          errorObj.pinCode = '安全码没有输入完整！';\\n        }\\n        if(Object.keys(errorObj).length > 0) {\\n          const err = new Error();\\n          err.filed = errorObj;\\n          Notify.error({ title: '提交失败！', description: '请确认提交表单是否正确！' });\\n          throw err;\\n        }\\n        Notify.success({\\n          title: '提交成功！',\\n          description: `表单提交成功，安全码为：${current.pinCode.join('')}！`,\\n        });\\n      }}\\n      fields={{\\n        pinCode: {\\n          initialValue: ['', '', '', '', ''],\\n          children: <PinCode />\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        console.log('state:',state.current.pinCode.join(''))\\n        return (\\n          <div>\\n            <Row>\\n              <Col fixed>{fields.pinCode}</Col>\\n            </Row>\\n            <Row>\\n              <Col fixed>\\n                <Button size=\\\"small\\\" disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n                <span style={{ paddingLeft: 16, color: '#a7a7a7', verticalAlign: 'middle' }}>\\n                  {state.current.pinCode.join('')}\\n                </span>\\n              </Col>\\n            </Row>\\n            <Row>\\n              <Col>\\n                <pre style={{ padding: 10, marginTop: 10 }}>\\n                  {JSON.stringify(state.current, null, 2)}\\n                </pre>\\n              </Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 更改占位符\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { PinCode, Divider } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <PinCode placeholder=\\\"■\\\" value={['8', '7', '3', '', '']} onChange={(val) => console.log(val)} />\\n    <Divider />\\n    <PinCode placeholder=\\\"★\\\" value={['6', '', '', '', '']} onChange={(val) => console.log(val)} />\\n    <Divider />\\n    <PinCode placeholder=\\\"🤣\\\" value={['', '', '', '', '']} onChange={(val) => console.log(val)} />\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 输入框被禁用\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { PinCode, Divider } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <PinCode disabled value={['1', '9', '8', '7', '0']} />\\n    <Divider />\\n    <PinCode disabled value={['', '', '', '', '']} />\\n    <Divider />\\n    <PinCode disabled placeholder=\\\"🤣\\\" value={['', '', '', '', '']} />\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 尺寸大小\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { PinCode, Divider } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <PinCode size=\\\"large\\\" value={['1', '9', '8', '7', '0']} />\\n    <Divider />\\n    <PinCode value={['', '', '', '', '']} />\\n    <Divider />\\n    <PinCode size=\\\"small\\\" value={['', '', '', '', '']} />\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## PinCode\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| value | 绑定值，根据数组长度，展示安全码的长度 | string[] | - |\\n| disabled | 禁用输入框 | Boolean | `false` |\\n| autoFocus | 自动获得焦点。 | Boolean | - |\\n| placeholder | 占位符 | string | `○` |\\n| size | 指定输入框的尺寸，除了默认的大小外，还提供了 `large`、`small` 和 `default` 三种尺寸。 | String | - |\\n| onChange | `value` 变化时回调函数 | Function(value: string[]) | - |\\n| onBlur | 失去焦点时运行 | Function(event: React.FocusEvent<HTMLInputElement\\\\>) | - |\\n| onFocus | 获得焦点时运行 | Function(event: React.FocusEvent<HTMLInputElement\\\\>) | - |\";"],"sourceRoot":""}