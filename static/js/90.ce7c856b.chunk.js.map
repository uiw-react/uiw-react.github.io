{"version":3,"sources":["../../../packages/react-alert/README.md"],"names":[],"mappings":"sHAAA,OAAe","file":"static/js/90.ce7c856b.chunk.js","sourcesContent":["export default \"Alert 确认对话框\\n===\\n\\n弹出对话框会在继续之前，通知用户重要信息，点击确定后异步关闭对话框。\\n\\n```jsx\\nimport { Alert } from 'uiw';\\n// or\\nimport Alert from '@uiw/react-alert';\\n```\\n\\n## 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, ButtonGroup, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    }\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          onClosed={this.onClosed.bind(this, 'visible1')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => console.log('您点击了确定按钮！')}\\n          onCancel={() => console.log('您点击了取消按钮！')}\\n          onClosed={this.onClosed.bind(this, 'visible2')}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>” 后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>” 事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, 'visible1')}>单个按钮确认对话框</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible2')}>确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 延迟关闭对话框\\n\\n这里是利用 `Promise` 等它执行完成再去关闭窗口\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    }\\n  }\\n  onClick() {\\n    this.setState({ visible: !this.statevisible });\\n  }\\n  onClosed() {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          icon=\\\"delete\\\"\\n          isOpen={this.state.visible}\\n          confirmText=\\\"确定按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => {\\n            console.log('确定回调！, 这里是利用Promise等执行完成再去关闭窗口');\\n            return new Promise((resolve, reject) => {\\n              const random = Math.random();\\n              console.log('测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误', random, random > 0.5)\\n              setTimeout(random > 0.5 ? resolve : reject, 3000);\\n            }).catch(() => {\\n              // 可以通过下面方式，阻止弹框消失\\n              // throw new Error();\\n            });\\n          }}\\n          onClosed={this.onClosed.bind(this, 'visible')}\\n        >\\n          这里是利用 <b>Promise</b> 的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。<br /><br />\\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则 执行 <b>reject</b> 触发 <b>catch</b> 错误。\\n        </Alert>\\n        <Button onClick={this.onClick.bind(this, 'visible')}>延迟关闭对话框</Button>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 带图标的弹出框\\n\\n通过设置 `icon` 和 `type` 参数设置带状态的弹出对话框。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, ButtonGroup, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    }\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, 'visible1')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-check\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, 'visible2')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, 'visible3')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, 'visible4')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, 'visible5')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, 'visible6')}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>” 后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>” 事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, 'visible1')} type=\\\"primary\\\">主要</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible2')} type=\\\"success\\\">成功</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible3')} type=\\\"warning\\\">警告</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible4')} type=\\\"danger\\\">错误</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible5')} type=\\\"light\\\">亮按钮</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible6')} type=\\\"dark\\\">暗按钮</Button>\\n        </ButtonGroup>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n## 带标题的弹出框\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, ButtonGroup, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    }\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, 'visible1')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, 'visible2')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, 'visible3')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, 'visible4')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, 'visible5')}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, 'visible6')}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>” 后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>” 事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, 'visible1')} type=\\\"primary\\\">主要</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible2')} type=\\\"success\\\">成功</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible3')} type=\\\"warning\\\">警告</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible4')} type=\\\"danger\\\">错误</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible5')} type=\\\"light\\\">亮按钮</Button>\\n          <Button onClick={this.onClick.bind(this, 'visible6')} type=\\\"dark\\\">暗按钮</Button>\\n        </ButtonGroup>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 自定义按钮\\n\\n这个对话框有两个按钮，单击 **`确定按钮`** 或 **`取消按钮`** 后，此对话框将关闭，将不触发 ~~`onConfirm`~~ 或 ~~`onCancel`~~ 事件。因为这俩按钮是自定义按钮。你可以正对自定义按钮外面的对象定义 `className=\\\"w-alert-footer\\\"` 将显示默认样式。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, ButtonGroup, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    }\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          useButton={false}\\n          maskClosable={true}\\n          onClose={this.onClosed.bind(this)}\\n          // onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>” 后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “<del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n          <br /><br />\\n          <div className=\\\"w-alert-footer\\\">\\n            <Button type=\\\"danger\\\" onClick={this.onClosed.bind(this)} >确定按钮</Button>\\n            <Button onClick={this.onClosed.bind(this)} >取消按钮</Button>\\n          </div>\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 不显示遮罩层\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Alert, ButtonGroup, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    }\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          maskClosable={true}\\n          hasBackdrop={false}\\n          onClose={this.onClosed.bind(this)}\\n          onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>” 后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “<del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Props\\n\\n虽然类似于对 `<Modal>`，但 `<Alert>` 更具限制性，只应用于重要信息。此组件继承 [`<Modal>`](#/components/modal) 的属性，所以部分参数可以参考 `<Modal>` 组件。\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| onCancel | 取消按钮的回调函数 | Function(e) | - |\\n| onConfirm | 点击确定按钮回调 | Function(e) | - |\\n| cancelText | 取消按钮文字， | String | - |\\n| confirmText | 确认按钮文字 | String | `确认` |\\n| type | 按钮类型跟 `<Button>` 组件的 `type` 参数一致，同时会影响按钮颜色。 | String | `light` |\\n| icon[`<Modal>`](#/components/modal) | 设置对话框右上角图标，，设置 `type` 将图标设置不同的颜色。当前属性为 [`<Icon>`](#/components/icon) 组件的 `type` 属性，所以可以参考该组件自定义图标。 | String/ReactNode | - |\\n| title[`<Modal>`](#/components/modal)  | 设置标题 | Function(e) | - |\\n| useButton[`<Modal>`](#/components/modal) | 是否使用默认按钮，如果设置 `false` 需要自定义按钮关闭 | Boolean | `true` |\\n| isOpen[`<Modal>`](#/components/modal) | 对话框是否可见 | Boolean | `false` |\\n| maskClosable[`<Modal>`](#/components/modal) | 点击遮罩层是否允许关闭 | boolean | `true` |\\n\\n更多属性文档请参考 [Modal](#/components/modal)。\";"],"sourceRoot":""}