{"version":3,"sources":["../../node_modules/remark-parse/index.js","../../node_modules/remark-parse/lib/index.js"],"names":["remarkParse","options","Object","assign","this","Parser","doc","settings","data","fromMarkdown","extensions","mdastExtensions"],"mappings":"kHAEeA,ICMA,SAAqBC,GAAS,WAkB3CC,OAAOC,OAAOC,KAAM,CAACC,OAhBN,SAACC,GAEd,IAAMC,EAAmC,EAAKC,KAAK,YAEnD,OAAOC,YACLH,EACAJ,OAAOC,OAAO,GAAII,EAAUN,EAAS,CAInCS,WAAY,EAAKF,KAAK,wBAA0B,GAChDG,gBAAiB,EAAKH,KAAK,2BAA6B","file":"static/js/vendors-remark.7315e518.chunk.js","sourcesContent":["import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n"],"sourceRoot":""}