{"version":3,"file":"static/js/6566.05382686.chunk.js","mappings":"gHAAA","sources":["../../packages/react-form/README.md"],"sourcesContent":["export default \"Form 表单\\n===\\n\\n由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。\\n\\n```jsx\\nimport { Form, FormItem } from 'uiw';\\n// or\\nimport { Form, FormItem } from '@uiw/react-form';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\n\\nimport React, { useState, useRef } from \\\"react\\\";\\nimport ReactDOM from 'react-dom';\\nimport { Form, Input, Row, Col, Slider, Button, Notify } from 'uiw';\\n\\nfunction Demo() {\\n  const form = useRef()\\n\\n  const onSubmit = () => {\\n    form.current.onSubmit()\\n  }\\n  const resetForm = () => {\\n    form.current.resetForm()\\n  }\\n  const getFieldValues = () => {\\n    console.log('getFieldValues', form.current.getFieldValues())\\n  }\\n\\n  return (\\n    <div>\\n      <Form\\n        ref={form}\\n        onChange={({ initial, current }) => {\\n          console.log('onChange', initial, current);\\n        }}\\n        onSubmit={({ initial, current }) => {\\n          if (current.name === initial.name) {\\n            Notify.error({\\n              title: '提交失败！',\\n              description: `表单提交内容为空！`,\\n            });\\n          } else {\\n            Notify.success({\\n              title: '提交成功！',\\n              description: `姓名为：${current.name}，提交完成，将自动填充初始化值！`,\\n            });\\n          }\\n        }}\\n        fields={{\\n          name: {\\n            label: '姓名',\\n            children: <Input placeholder=\\\"请输入姓名\\\" />\\n          },\\n        }}\\n      >\\n        {({ fields, state, canSubmit }) => {\\n          return (\\n            <div>\\n              <Row>\\n                <Col style={{ maxWidth: 300 }}>{fields.name}</Col>\\n              </Row>\\n              <Row>\\n                <Col>\\n                  <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n                </Col>\\n              </Row>\\n              <Row>\\n                <Col>\\n                  {JSON.stringify(state.current)}\\n                </Col>\\n              </Row>\\n            </div>\\n          )\\n        }}\\n      </Form>\\n      <Button type=\\\"primary\\\" onClick={onSubmit} >submit</Button>\\n      <Button type=\\\"primary\\\" onClick={resetForm}>resetForm</Button>\\n      <Button type=\\\"primary\\\" onClick={getFieldValues}>getValues</Button>\\n    </div>\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 自定义校验\\n\\n一般校验可不需引入外部包解决，如果遇到大型工程表单比较多的地方推荐使用 [jquense/yup](https://github.com/jquense/yup)\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Input, Notify, Checkbox, Switch, RadioGroup, Radio, Textarea, Row, Col, Button } from 'uiw';\\n\\nconst Demo = () => (\\n  <Form\\n    onSubmit={({initial, current}) => {\\n      const errorObj = {};\\n      if (current.userName.startsWith('u')) {\\n        errorObj.userName = `姓名 ${current.userName} 不能以 ‘u’ 开头`;\\n      }\\n      if (!current.checkboxOne) {\\n        errorObj.checkboxOne = '一个多选条件 为必填';\\n      }\\n      if (!current.terms) {\\n        errorObj.terms = '必须统一服务条款';\\n      }\\n      if(Object.keys(errorObj).length > 0) {\\n        const err = new Error();\\n        err.filed = errorObj;\\n        throw err;\\n      }\\n      Notify.success({\\n        title: '提交成功！',\\n        description: `姓名为：${current.userName}，提交完成，将自动填充初始化值！`,\\n      });\\n    }}\\n    onSubmitError={(error) => {\\n      if (error.filed) {\\n        return { ...error.filed };\\n      }\\n      return null;\\n    }}\\n    fields={{\\n      userName: {\\n        initialValue: 'uiw',\\n        label: '姓名',\\n        children: <Input type=\\\"text\\\" />,\\n        help: '以“u”开头的名字将在此处显示错误信息'\\n      },\\n      age: {\\n        initialValue: '9',\\n        label: '年龄',\\n        children: <Input type=\\\"number\\\" />\\n      },\\n      checkbox: {\\n        initialValue: ['四川菜'],\\n        label: '选择你想吃的菜',\\n        children: (\\n          <Checkbox.Group>\\n            <div>菜系</div>\\n            <Checkbox value=\\\"四川菜\\\">四川菜</Checkbox>\\n            <Checkbox value=\\\"湖北菜\\\">湖北菜</Checkbox>\\n            <Checkbox value=\\\"西北菜\\\">西北菜</Checkbox>\\n            <Checkbox value=\\\"新疆菜\\\">新疆菜</Checkbox>\\n            <Checkbox value=\\\"东北菜\\\">东北菜</Checkbox>\\n            <div style={{ marginTop: 10 }}>家常菜</div>\\n            <Checkbox value=\\\"红烧武昌鱼\\\">红烧武昌鱼</Checkbox>\\n            <Checkbox value=\\\"麻婆豆腐\\\">麻婆豆腐</Checkbox>\\n            <Checkbox value=\\\"北京烤鸭\\\">北京烤鸭</Checkbox>\\n          </Checkbox.Group>\\n        )\\n      },\\n      checkboxOne: {\\n        inline: true,\\n        label: '一个多选条件',\\n        children: <Checkbox value=\\\"1\\\">四川菜</Checkbox>\\n      },\\n      switch: {\\n        inline: true,\\n        initialValue: true,\\n        label: '开启',\\n        children: <Switch size=\\\"small\\\" />\\n      },\\n      radioGroup: {\\n        inline: true,\\n        initialValue: '男',\\n        label: '单选',\\n        children: (\\n          <RadioGroup name=\\\"other\\\">\\n            <Radio value=\\\"男\\\">男</Radio>\\n            <Radio value=\\\"女\\\">女</Radio>\\n            <Radio value=\\\"人妖\\\" disabled>人妖</Radio>\\n            <Radio value=\\\"未知\\\">未知</Radio>\\n          </RadioGroup>\\n        )\\n      },\\n      textarea: {\\n        initialValue: '',\\n        label: '多行文本输入框',\\n        children: <Textarea placeholder=\\\"请输入内容\\\" />\\n      },\\n      terms: {\\n        validator: (currentValue) => {\\n          return !currentValue ? '必须统一服务条款' : null;\\n        },\\n        style: { marginBottom: 0 },\\n        children: <Checkbox value=\\\"1\\\">已阅读并同意<a href=\\\"#\\\">服务条款</a></Checkbox>\\n      }\\n    }}\\n  >\\n    {({ fields, state, canSubmit, resetForm }) => {\\n      console.log('fields:-->', state);\\n      return (\\n        <div style={{ maxWidth: 500 }}>\\n          <Row gutter={10}>\\n            <Col>{fields.userName}</Col>\\n            <Col>{fields.age}</Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col>{fields.checkbox}</Col>\\n            <Col>{fields.checkboxOne}</Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col>{fields.radioGroup}</Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col>{fields.switch}</Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col>{fields.textarea}</Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col style={{ padding: '5px 0 10px 0' }}>\\n              {fields.terms}\\n            </Col>\\n          </Row>\\n          <Row gutter={10}>\\n            <Col fixed>\\n              <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n              <Button type=\\\"light\\\" onClick={resetForm}>重置表单</Button>\\n            </Col>\\n          </Row>\\n          <Row>\\n            <Col>\\n              <pre style={{ padding: '10px 0 0 10px' }}>\\n                {JSON.stringify(state.current, null, 2)}\\n              </pre>\\n            </Col>\\n          </Row>\\n        </div>\\n      )\\n    }}\\n  </Form>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 水平登录栏\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Input, Row, Col, Notify, Button } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onSubmit={({initial, current}) => {\\n        const errorObj = {};\\n        if (!current.username) {\\n          errorObj.username = '用户名不能为空！';\\n        }\\n        if (!current.password) {\\n          errorObj.password = '密码不能为空！';\\n        }\\n        if(Object.keys(errorObj).length > 0) {\\n          const err = new Error();\\n          err.filed = errorObj;\\n          Notify.error({ title: '提交失败！', description: '请确认提交表单是否正确！' });\\n          throw err;\\n        }\\n        console.log('-->>', initial, current);\\n        Notify.success({ title: '提交成功！', description: '恭喜你登录成功！' });\\n      }}\\n      onSubmitError={(error) => {\\n        if (error.filed) {\\n          return { ...error.filed };\\n        }\\n        return null;\\n      }}\\n      fields={{\\n        username: {\\n          labelClassName: 'fieldLabel',\\n          labelFor: 'username-inline',\\n          children: <Input preIcon=\\\"user\\\" id=\\\"username-inline\\\" />\\n        },\\n        password: {\\n          labelClassName: 'fieldLabel',\\n          labelFor: 'password-inline',\\n          children: <Input preIcon=\\\"lock\\\" id=\\\"password-inline\\\" type=\\\"password\\\" />\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit, resetForm }) => {\\n        console.log('fields:', state);\\n        return (\\n          <div>\\n            <Row gutter={10}>\\n              <Col fixed>{fields.username}</Col>\\n              <Col fixed>{fields.password}</Col>\\n            </Row>\\n            <Row gutter={10}>\\n              <Col>\\n                <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n                <Button type=\\\"danger\\\" onClick={resetForm}>重置表单</Button>\\n              </Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 登录\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Input, Row, Col, Checkbox, Notify, Button } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onSubmit={({initial, current}) => {\\n        console.log('-->>', initial, current);\\n      }}\\n      fields={{\\n        username: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          labelFor: 'username',\\n          children: <Input preIcon=\\\"user\\\" id=\\\"username\\\" />\\n        },\\n        password: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          labelFor: 'password',\\n          children: <Input preIcon=\\\"lock\\\" id=\\\"password\\\" type=\\\"password\\\" />\\n        },\\n        terms: {\\n          validator: (currentValue) => !currentValue ? '必须统一服务条款' : null,\\n          children: <Checkbox value=\\\"1\\\">已阅读并同意</Checkbox>\\n        }\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        console.log('fields:', state);\\n        return (\\n          <div>\\n            <Row>\\n              <Col fixed>{fields.username}</Col>\\n            </Row>\\n            <Row>\\n              <Col fixed>{fields.password}</Col>\\n            </Row>\\n            <Row>\\n              <Col fixed align=\\\"middle\\\">{fields.terms}</Col>\\n              <Col fixed style={{ marginTop: -4 }}><a href=\\\"#\\\">服务条款</a></Col>\\n            </Row>\\n            <Row>\\n              <Col fixed>\\n                <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n              </Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 表单提交\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Input, Select, Row, Col, Button } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onSubmit={({initial, current}) => {\\n        console.log('-->>', initial, current);\\n      }}\\n      fields={{\\n        firstName: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          inline: true,\\n          label: '姓氏',\\n          children: <Input />\\n        },\\n        lastName: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          initialValue: '先生',\\n          inline: true,\\n          label: '名字',\\n          children: <Input />\\n        },\\n        email: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          validator: (currentValue) => {\\n            return currentValue && currentValue.length < 2 ? 'Password must be 8+ characters' : null;\\n          },\\n          inline: true,\\n          label: 'Email',\\n          children: <Input />\\n        },\\n        select: {\\n          labelClassName: 'fieldLabel',\\n          labelStyle: { width: 60 },\\n          inline: true,\\n          label: '选择器',\\n          children: (\\n            <Select>\\n              <Select.Option>Choose an item...</Select.Option>\\n              <Select.Option value=\\\"1\\\">One</Select.Option>\\n              <Select.Option value=\\\"2\\\">Two</Select.Option>\\n              <Select.Option value=\\\"3\\\">Three</Select.Option>\\n              <Select.Option value=\\\"4\\\">Four</Select.Option>\\n            </Select>\\n          ),\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        console.log('fields:', state);\\n        return (\\n          <div>\\n            <Row gutter={10} style={{ marginBottom: 10 }}>\\n              <Col>{fields.firstName}</Col>\\n              <Col>{fields.lastName}</Col>\\n            </Row>\\n            <Row gutter={10}>\\n              <Col>{fields.email}</Col>\\n              <Col>{fields.select}</Col>\\n            </Row>\\n            <Row gutter={10}>\\n              <Col />\\n              <Col fixed align=\\\"bottom\\\"><Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button></Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### 自定义控件应用\\n\\n下面实例是在 [`<Form />`](#/components/form) 表单组件中，应用自定义 `<CustomSelect />` 控件组件。\\n\\n> ⚠️ 注意，自定义控件需要两个必要的 `props` 参数，`value` 和 `onChange`\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n- `value` 用于值传递，\\n- `onChange(value)` 用于值变更需要执行的回调函数，回调函数第一个参数必须是 `value`。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Form, Row, Col, Dropdown, Menu, Icon, Button, Notify } from 'uiw';\\n\\n// 自定义组件\\nfunction CustomSelect(props) {\\n  const { option = [], onChange } = props;\\n  const [value, setValue] = React.useState(props.value);\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  React.useEffect(() => {\\n    if (value !== props.value) {\\n      setValue(props.value);\\n    }\\n  }, [props.value]);\\n  const label = option.find(item => value === item.value);\\n  return (\\n    <Dropdown\\n      trigger=\\\"click\\\"\\n      onVisibleChange={(open) => setIsOpen(open)}\\n      isOpen={isOpen}\\n      menu={\\n        <Menu bordered style={{ minWidth: 120 }}>\\n          {option.map((item, idx) => (\\n            <Menu.Item active={value === item.value} key={idx} text={item.label}\\n              onClick={() => {\\n                setValue(item.value);\\n                setIsOpen(false)\\n                onChange && onChange(item.value);\\n              }}\\n            />\\n          ))}\\n        </Menu>\\n      }\\n    >\\n      <Button\\n        style={{\\n          boxShadow: 'inset 0 0 0 1px rgba(16, 22, 26, 0.2), inset 0 -1px 0 rgba(16, 22, 26, 0.1)'\\n        }}\\n        type=\\\"link\\\"\\n      >\\n        {label.label}<Icon type={isOpen ? 'up' : 'down'} />\\n      </Button>\\n    </Dropdown>\\n  );\\n}\\n\\n// 自定义组件应用实例\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onSubmitError={(error) => {\\n        if (error.filed) {\\n          return { ...error.filed };\\n        }\\n        return null;\\n      }}\\n      onSubmit={({initial, current}) => {\\n        console.log('~~~', current);\\n        const errorObj = {};\\n        if (!current.select) {\\n          errorObj.select = '内容为空，请输入内容';\\n        }\\n        if(Object.keys(errorObj).length > 0) {\\n          const err = new Error();\\n          err.filed = errorObj;\\n          Notify.error({ title: '提交失败！', description: '请确认提交表单是否正确！' });\\n          throw err;\\n        }\\n        Notify.success({\\n          title: '提交成功！',\\n          description: `表单提交成功，内容为：${current.select}，将自动填充初始化值！`,\\n        });\\n      }}\\n      fields={{\\n        select: {\\n          initialValue: 0,\\n          children: (\\n            <CustomSelect option={[\\n              { label: '请选择', value: 0 },\\n              { label: '经济舱', value: 1 },\\n              { label: '豪华经济舱', value: 2 },\\n              { label: '商务舱', value: 3 },\\n              { label: '头等舱', value: 4 },\\n            ]} />\\n          )\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        return (\\n          <div>\\n            <Row>\\n              <Col style={{ maxWidth: 300 }}>{fields.select}</Col>\\n            </Row>\\n            <Row>\\n              <Col fixed>\\n                <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n              </Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### FormItem 竖排\\n\\n对组件 `FormItem` 竖排展示示例。\\n\\n> ⚠️ 注意：`FormItem` 组件只在 `Form` 组件中使用，在 `@v4.10.4+` 以上版本可以当普通 `form` 使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Form, FormItem, Button } from 'uiw';\\n\\nconst Demo = () => {\\n  const [formData, setFormData] = React.useState({});\\n  const handleSubmit = (_, e) => {\\n    e && e.preventDefault();\\n    const fData = new FormData(e.target);\\n    const data = {};\\n    fData.forEach((value, key) => { data[key] = value; });\\n    setFormData(data);\\n  }\\n  return (\\n    <Form onSubmit={handleSubmit} onReset={() => setFormData({})}>\\n      <FormItem\\n        label=\\\"可选字段\\\"\\n        labelFor=\\\"item-basic-input\\\"\\n        help={<span>在上面的字段中输入一个值</span>}\\n      >\\n        <Input id=\\\"item-basic-input\\\" name=\\\"basic\\\" type=\\\"text\\\"/>\\n      </FormItem>\\n      <FormItem\\n        label=\\\"用户名\\\"\\n        labelFor=\\\"item-username-input\\\"\\n        help={(!formData.username || formData.username.length < 8) ? \\\"用户名长度至少为8个字符串。\\\" : \\\"用户名正确 √ \\\"}\\n        hasError={(!formData.username || formData.username.length < 8)}\\n      >\\n        <Input id=\\\"item-username-input\\\" name=\\\"username\\\" type=\\\"text\\\"/>\\n      </FormItem>\\n      <FormItem>\\n        <Button type=\\\"success\\\" htmlType=\\\"submit\\\"> Submit </Button>\\n        <Button type=\\\"light\\\" htmlType=\\\"reset\\\"> Reset </Button>\\n      </FormItem>\\n      <pre>\\n      {JSON.stringify(formData, null, 2)}\\n      </pre>\\n    </Form>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### FormItem 横排\\n\\n对组件 `FormItem` 横排展示示例。\\n\\n> ⚠️ 注意：`FormItem` 组件只在 `Form` 组件中使用，在 `@v4.10.4+` 以上版本可以当普通 `form` 使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, FormItem } from 'uiw';\\n\\nconst Demo = () => (\\n  <Form>\\n    <FormItem\\n      inline={true}\\n      label=\\\"可选字段\\\"\\n      labelFor=\\\"basic-input-inline\\\"\\n      help={<span>在上面的字段中输入一个值</span>}\\n      onChange={() => {\\n        console.log('TEST::');\\n      }}\\n    >\\n      <Input id=\\\"basic-input-inline\\\" name=\\\"basic\\\" type=\\\"text\\\"/>\\n    </FormItem>\\n    <FormItem\\n      inline={true}\\n      label=\\\"用户名\\\"\\n      labelFor=\\\"username-input-inline\\\"\\n      labelClassName=\\\"username\\\"\\n      help=\\\"用户名长度至少为8个字符串。\\\"\\n      hasError={true}\\n    >\\n      <Input id=\\\"username-input-inline\\\" name=\\\"username\\\" type=\\\"text\\\"/>\\n    </FormItem>\\n  </Form>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Form\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| fields | 设置字段 | object | - |\\n| children | 回调 {`fields`, `state`, `canSubmit`, `resetForm`} | function | - |\\n| onSubmit | 提交表单时调用  | `(state: FormSubmitProps, event: React.FormEvent) => any` | - |\\n| afterSubmit `@3.0.0+` | 提交回调 {`initial`, `current`}  | function({ initial, current }) | - |\\n| onChange | 表单发生改变回调函数 {`initial`, `current`}  | function({ initial, current }) | - |\\n| onSubmitError | 调用 `onSubmit` 抛出的任何错误。从字段名称返回对象映射。  | function | - |\\n| resetOnSubmit | 在 `onSubmit` 成功后将表单重置为其初始状态。| bool | `true` |\\n\\n```js\\n// => fields props\\n{\\n  firstName: {\\n    initialValue: '王',\\n    inline: true,\\n    label: '姓',\\n    labelClassName: 'fieldLabel',\\n    labelStyle: { width: 60 },\\n    // 验证，通过 `canSubmit()` 方法获得，提交按钮是否被禁用\\n    validator: (currentValue) => {},\\n    help: '帮助提示信息！',\\n    children: <Input type=\\\"number\\\" />\\n  },\\n}\\n```\\n\\n## FormItem\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| label | 表单标题展示 | string | - |\\n| labelClassName | 表单标题样式名称 | string | - |\\n| labelStyle | 表单标题样式 | object | - |\\n| labelFor | 列的宽度相对于同一网格中其他列的比率 | number | - |\\n| help | 提示信息 | ReactNode | - |\\n| hasError | 如果为true，则应用错误CSS。转动边框并帮助文字变红。 | number | - |\\n\";"],"names":[],"sourceRoot":""}