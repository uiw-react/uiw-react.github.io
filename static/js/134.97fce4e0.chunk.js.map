{"version":3,"sources":["../../../packages/react-switch/README.md"],"names":[],"mappings":"uHAAA,OAAe","file":"static/js/134.97fce4e0.chunk.js","sourcesContent":["export default \"Switch 开关\\n===\\n\\n表示两种相互对立的状态间的切换，多用于触发「开/关」。选中时的内容支持响应式。\\n\\n```jsx\\nimport { Switch } from 'uiw';\\n// or\\nimport Switch from '@uiw/react-switch';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Switch } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Switch checked style={{ marginRight: 10 }} />\\n    <Switch style={{ marginRight: 10 }} />\\n    <Switch data-checked=\\\"开\\\" data-unchecked=\\\"关\\\">电源</Switch>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### Form 中使用 Switch\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Form, Switch, Row, Col, Button, Notify } from 'uiw';\\n\\nconst Demo = () => (\\n  <Form\\n    onChange={({ initial, current }) => { }}\\n    resetOnSubmit={false}\\n    onSubmitError={(error) => error && error.filed ? { ...error.filed } : null}\\n    onSubmit={({initial, current}) => {\\n      console.log('switch::', initial, current)\\n      const ErrObj = {};\\n      if(Object.keys(ErrObj).length > 0) {\\n        const err = new Error();\\n        err.filed = ErrObj;\\n        throw err;\\n      }\\n    }}\\n    fields={{\\n      switch: {\\n        checked: true,\\n        initialValue: true,\\n        label: '请输入内容',\\n        help: '必选选项！',\\n        validator: value => !value ? '必填选项！' : null,\\n        children: <Switch style={{ maxWidth: 200 }} />,\\n      },\\n    }}\\n  >\\n    {({ fields, state, canSubmit }) => {\\n      return (\\n        <div>\\n          <Row>\\n            <Col>{fields.switch}</Col>\\n          </Row>\\n          <Row>\\n            <Col>\\n              <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">提交</Button>\\n            </Col>\\n          </Row>\\n          <Row>\\n            <Col>\\n              <pre style={{ padding: 10, marginTop: 10 }}>\\n                {JSON.stringify(state.current, null, 2)}\\n              </pre>\\n            </Col>\\n          </Row>\\n        </div>\\n      );\\n    }}\\n  </Form>\\n);\\n\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 设置文字\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Switch } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Switch\\n      data-checked=\\\"开\\\"\\n      data-unchecked=\\\"关\\\"\\n      onChange={(e) => {\\n        console.log('e', e.target.checked);\\n      }}\\n      style={{ marginRight: 10 }}\\n    />\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### 禁用状态\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Switch } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Switch disabled checked style={{ marginRight: 10 }} />\\n    <Switch disabled style={{ marginRight: 10 }} />\\n    <Switch disabled data-checked=\\\"开\\\" data-unchecked=\\\"关\\\">电源</Switch>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 尺寸\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Switch } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Switch size=\\\"large\\\" style={{ marginRight: 10 }} data-checked=\\\"开\\\" data-unchecked=\\\"关\\\" />\\n    <Switch size=\\\"large\\\" checked style={{ marginRight: 10 }} />\\n    <Switch style={{ marginRight: 10 }} />\\n    <Switch style={{ marginRight: 10 }} data-checked=\\\"开\\\" data-unchecked=\\\"关\\\" />\\n    <Switch size=\\\"small\\\" data-checked=\\\"开\\\" data-unchecked=\\\"关\\\">电源</Switch>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 控制组件\\n\\n通过 `checked` 属性改变 `Switch` 组件状态。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Switch, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      checked: true\\n    }\\n  }\\n  onChange(e) {\\n    console.log('~~~:::');\\n    this.setState({ checked: e.target.checked });\\n  }\\n  render() {\\n    return (\\n      <div style={{ backgroundColor: '#fff', margin: -15, padding: 15, borderRadius: '5px 5px 0 0' }}>\\n        <Switch onChange={this.onChange.bind(this)} checked={this.state.checked} style={{ marginRight: 10 }} />\\n        <Button\\n          size=\\\"small\\\"\\n          type=\\\"primary\\\"\\n          onClick={() => {\\n            this.setState({ checked: !this.state.checked });\\n          }}\\n        >\\n          点击按钮改变 Switch 状态\\n        </Button>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Switch \\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|------ |-------- |---------- |-------- |\\n| value | 根据 value 进行比较，判断是否选中 | String/Number/Boolean | - |\\n| name | 用于表单对应的名称 | String | - |\\n| checked | 指定当前是否选中 | boolean | false |\\n| disabled | 是否禁用 | boolean | false |\\n| onChange | 变化时回调函数 | Function(e:Event) | - |\\n| data-checked |  选中时的内容 | string/ReactNode | - |\\n| data-unchecked |  非选中时的内容 | string/ReactNode | - |\\n| size |  开关大小，可选值：`large` `default` `small` | string | default |\\n\";"],"sourceRoot":""}