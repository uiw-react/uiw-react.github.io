{"version":3,"sources":["../../../packages/react-checkbox/README.md"],"names":[],"mappings":"sHAAA,OAAe","file":"static/js/99.c545c47c.chunk.js","sourcesContent":["export default \"Checkbox 多选框\\n===\\n\\n一组备选项中进行多选\\n\\n```jsx\\nimport { Checkbox } from 'uiw';\\n// or\\nimport Checkbox from '@uiw/react-checkbox';\\n```\\n\\n### 基础用法\\n\\n单独使用可以表示两种状态之间的切换，半选中只是样式上的表现。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true--> \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Checkbox } from 'uiw';\\n\\nReactDOM.render(\\n  <div>\\n    <Checkbox onChange={(e) =>{\\n      console.log(e.target.checked)\\n      console.log(e.target)\\n    }}>未选中</Checkbox>\\n    <Checkbox checked >选中</Checkbox>\\n  </div>,\\n  _mount_\\n);\\n```\\n\\n### Form 中使用 Checkbox\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->  \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Form, Checkbox, Row, Col, Button, Notify } from 'uiw';\\n\\nconst Demo = () => (\\n  <div>\\n    <Form\\n      onChange={({ initial, current }) => {\\n        console.log('onChange~~~:::', initial, current);\\n      }}\\n      onSubmit={({initial, current}) => {\\n        console.log('onSubmit~~~:::', initial, current)\\n        Notify.success({\\n          title: '提交成功！',\\n          description: `选项为：【${current.checkbox}】，提交完成，将自动填充初始化值！`,\\n        });\\n      }}\\n      fields={{\\n        checkbox: {\\n          inline: true,\\n          initialValue: true,\\n          label: '单选条件',\\n          children: <Checkbox>四川菜</Checkbox>,\\n          validator: (value) => {\\n            return !value ? '必须统一服务条款' : null;\\n          },\\n        },\\n        checkboxGroup: {\\n          initialValue: ['四川菜'],\\n          label: '选择你想吃的菜',\\n          children: (\\n            <Checkbox.Group>\\n              <div>菜系</div>\\n              <Checkbox value=\\\"四川菜\\\">四川菜</Checkbox>\\n              <Checkbox value=\\\"湖北菜\\\">湖北菜</Checkbox>\\n              <Checkbox value=\\\"西北菜\\\">西北菜</Checkbox>\\n              <Checkbox disabled value=\\\"新疆菜\\\">新疆菜</Checkbox>\\n              <Checkbox value=\\\"东北菜\\\">东北菜</Checkbox>\\n              <div style={{ marginTop: 10 }}>家常菜</div>\\n              <Checkbox value=\\\"红烧武昌鱼\\\">红烧武昌鱼</Checkbox>\\n              <Checkbox value=\\\"麻婆豆腐\\\">麻婆豆腐</Checkbox>\\n              <Checkbox value=\\\"北京烤鸭\\\">北京烤鸭</Checkbox>\\n            </Checkbox.Group>\\n          ),\\n        },\\n      }}\\n    >\\n      {({ fields, state, canSubmit }) => {\\n        return (\\n          <div>\\n            <Row>\\n              <Col>{fields.checkbox}</Col>\\n            </Row>\\n            <Row>\\n              <Col>{fields.checkboxGroup}</Col>\\n            </Row>\\n            <Row>\\n              <Col>\\n                <Button disabled={!canSubmit()} type=\\\"primary\\\" htmlType=\\\"submit\\\">\\n                  提交\\n                </Button>\\n              </Col>\\n            </Row>\\n            <Row>\\n              <Col>\\n                <pre style={{ padding: 10, marginTop: 10 }}>\\n                  {JSON.stringify(state.current, null, 2)}\\n                </pre>\\n              </Col>\\n            </Row>\\n          </div>\\n        )\\n      }}\\n    </Form>\\n  </div>\\n)\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 禁用样式\\n\\n通过设置 `disabled` 属性来禁用多选框。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true--> \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Checkbox } from 'uiw';\\n\\nReactDOM.render(\\n  <div>\\n    <Checkbox disabled checked>未选中禁用</Checkbox>\\n    <Checkbox disabled checked>选中禁用</Checkbox>\\n    <Checkbox disabled indeterminate>半选中禁用</Checkbox>\\n  </div>,\\n  _mount_\\n);\\n```\\n\\n### 全选\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true--> \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Checkbox, Divider } from 'uiw';\\n\\nconst checkedList = [ '四川菜', '湖北菜', '西北菜', '新疆菜', '东北菜' ];\\nclass Demo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ['四川菜', '新疆菜'],\\n      indeterminate: true,\\n      checkAll: false,\\n    };\\n  }\\n  onChange(e, list) {\\n    console.log('list', list);\\n    console.log('list', checkedList);\\n    this.setState({\\n      value: list,\\n      indeterminate: !!list.length && (list.length < checkedList.length),\\n      checkAll: list.length === checkedList.length,\\n    });\\n  }\\n  onCheckAllChange(e) {\\n    this.setState({\\n      value: e.target.checked ? checkedList : [],\\n      indeterminate: false,\\n      checkAll: e.target.checked,\\n    });\\n  }\\n  render() {\\n    const { indeterminate, checkAll } = this.state;\\n    return (\\n      <div>\\n        <Checkbox checked={checkAll} indeterminate={indeterminate} onChange={this.onCheckAllChange.bind(this)}>全选</Checkbox>\\n        <Divider />\\n        <Checkbox.Group name=\\\"cuisine\\\" value={this.state.value} onChange={this.onChange.bind(this)}>\\n          {checkedList.map((item, idx) => {\\n            return (\\n              <Checkbox key={idx} value={item}>{item}</Checkbox>\\n            )\\n          })}\\n        </Checkbox.Group>\\n      </div>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 多选组\\n\\n方便的从数组生成 `Checkbox` 组。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true--> \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Checkbox, Divider, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ['四川菜', '新疆菜'],\\n    };\\n  }\\n  onChange(e, list) {\\n    console.log('Value:-->', e.target.value, list);\\n    this.setState({ value: list });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Checkbox.Group name=\\\"cuisine\\\" value={this.state.value} onChange={this.onChange.bind(this)}>\\n          <div>川菜</div>\\n          <Checkbox value=\\\"四川菜\\\">四川菜</Checkbox>\\n          <Checkbox value=\\\"湖北菜\\\">湖北菜</Checkbox>\\n          <div>本帮江浙菜</div>\\n          <Checkbox value=\\\"西北菜\\\">西北菜</Checkbox>\\n          <Checkbox value=\\\"新疆菜\\\">新疆菜</Checkbox>\\n          <div>家常菜</div>\\n          <Checkbox value=\\\"东北菜\\\">东北菜</Checkbox>\\n          <Checkbox value=\\\"北京烤鸭\\\">北京烤鸭</Checkbox>\\n        </Checkbox.Group>\\n        <Divider />\\n        <Button\\n          type=\\\"primary\\\"\\n          onClick={() => {\\n            // console.log('set::', ['东北菜', '北京烤鸭']);\\n            this.setState({ value: ['东北菜', '北京烤鸭'] });\\n          }}\\n        >\\n          选中两个\\n        </Button>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 控制组件\\n\\n通过 `checked` 属性改变 `Checkbox` 组件状态。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true--> \\n```js\\nimport ReactDOM from 'react-dom';\\nimport { Checkbox, Button } from 'uiw';\\n\\nclass Demo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      checked: true\\n    }\\n  }\\n  onChange(e) {\\n    console.log('e.target.checked:', e.target.checked);\\n    this.setState({ checked: e.target.checked });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Checkbox onChange={this.onChange.bind(this)} checked={this.state.checked} style={{ marginRight: 10 }} />\\n        <Button\\n          size=\\\"small\\\"\\n          type=\\\"primary\\\"\\n          onClick={() => {\\n            this.setState({ checked: !this.state.checked });\\n          }}\\n        >\\n          点击按钮改变 Checkbox 状态\\n        </Button>\\n      </div>\\n    )\\n  }\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n## Checkbox\\n\\n| 参数      | 说明    | 类型      |  默认值   |\\n|--------- |-------- |---------- |-------- |\\n| options | 指定当前是否选中 | Boolean | false |\\n| disabled | 禁用 | Boolean | false |\\n| onChange | 变化时回调函数 | Function(e:Event, checked:Boolean) | - |\\n| checked | 指定当前是否选中 | Boolean | false |\\n| indeterminate | 半选中，只负责样式控制 | Boollean | false |\\n\\n## Checkbox.Group\\n\\n| 参数      | 说明    | 类型      |  默认值   |\\n|--------- |-------- |---------- |-------- |\\n| name | 隐藏输入的名称，在表单中使用时很有用 | string | - |\\n| value | 控制时 `select` 的值必须与 `onChange` 函数一起使用才能更新 `select` 的值 | Array | `[]` |\\n| onChange | 变化时回调函数 | Function(e:Event, checkedValues: Array) | - |\\n\";"],"sourceRoot":""}