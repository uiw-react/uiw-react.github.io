{"version":3,"sources":["../../../packages/react-layout/README.md"],"names":[],"mappings":"uHAAA,OAAe","file":"static/js/112.0d8cea2c.chunk.js","sourcesContent":["export default \"Layout 布局\\n===\\n\\n协助进行页面级整体布局。\\n\\n> ⚠️ 注意：采用 flex 布局实现，请注意[浏览器兼容性](http://caniuse.com/#search=flex)问题。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--rehype-->\\n```jsx\\nimport { Layout } from 'uiw';\\n// or\\nimport Layout from '@uiw/react-layout';\\nconst { Header, Footer, Sider, Content } = Layout;\\n```\\n\\n## 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Layout, Divider } from 'uiw';\\nconst { Header, Footer, Sider, Content } = Layout;\\n\\nconst stylHeader = { color: '#fff' }\\nconst stylSider = { background: '#484a4e', color: '#fff', lineHeight: `120px`, textAlign: 'center' }\\nconst stylConten = { textAlign: 'center', background: 'rgba(16, 142, 233, 1)', minHeight: 120, lineHeight: '120px', color: '#fff' }\\n\\nfunction Demo() {\\n  const [collapsed, setCollapsed] = React.useState(false)\\n  return (\\n    <div>\\n      <Layout>\\n        <Sider collapsed={collapsed} style={stylSider}>Sider</Sider>\\n        <Layout>\\n          <Header style={stylHeader}>\\n            <button onClick={() => setCollapsed(!collapsed)}>{collapsed ? '展开 Sider' : '缩进 Sider'}</button>\\n          </Header>\\n          <Content style={stylConten}>Content</Content>\\n          <Footer>Footer</Footer>\\n        </Layout>\\n      </Layout>\\n\\n      <Divider />\\n\\n      <Layout>\\n        <Header style={stylHeader}>Header</Header>\\n        <Content style={stylConten}>Content</Content>\\n        <Footer>Footer</Footer>\\n      </Layout>\\n\\n      <Divider />\\n      \\n      <Layout>\\n        <Header style={stylHeader}>Header</Header>\\n        <Layout>\\n          <Sider style={stylSider}>Sider</Sider>\\n          <Content style={stylConten}>Content</Content>\\n        </Layout>\\n        <Footer>Footer</Footer>\\n      </Layout>\\n\\n      <Divider />\\n\\n      <Layout>\\n        <Header style={stylHeader}>Header</Header>\\n        <Layout>\\n          <Content style={stylConten}>Content</Content>\\n          <Sider style={stylSider}>Sider</Sider>\\n        </Layout>\\n        <Footer>Footer</Footer>\\n      </Layout>\\n    </div>\\n  );\\n}\\n\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Layout\\n\\n布局容器，其下可嵌套 `Header` `Sider` `Content` `Footer` 或 `Layout` 本身，可以放在任何父容器中。\\n\\n* `Header`：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\\n* `Sider`：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 `Layout` 中。\\n* `Content`：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\\n* `Footer`：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| className | 容器 className | string | - |\\n| style | 指定样式 | CSSProperties | - |\\n| theme | 主题颜色 | `light`、`dark` | `dark` |\\n| hasSider | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | boolean | - |\\n\\n## Layout.Sider\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| className | 容器 className | string | - |\\n| style | 指定样式 | CSSProperties | - |\\n| collapsed | 当前收起状态 | boolean | - |\\n| collapsedWidth | 收缩宽度，设置为 `0` | boolean | `80` |\\n| width | 宽度 | number/string | 200 |\\n\\n\";"],"sourceRoot":""}